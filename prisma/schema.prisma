// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GithubRepository {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  organization  String
  name          String
  description   String?
  githubId      String
  url           String
  pushedAt      DateTime
  size          Int
  starsCount    Int
  watchersCount Int
  language      String?
  license       String?
  stats         GithubStats[]

  @@unique([organization, name])
  @@index([organization, name])
}

model GithubStats {
  id            String           @id @default(cuid())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  date          String
  repositoryId  String
  repository    GithubRepository @relation(fields: [repositoryId], references: [id])
  commits       Int              @default(0)
  contributors  Int              @default(0)
  openIssues    Int              @default(0)
  closedIssues  Int              @default(0)
  branches      Int              @default(0)
  releases      Int              @default(0)
  starsCount    Int              @default(0)
  watchersCount Int              @default(0)

  @@unique([repositoryId, date])
}

model QubicStats {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  date                     String
  timestamp                String
  circulatingSupply        String
  activeAddresses          Int
  price                    Float
  marketCap                String
  epoch                    Int
  currentTick              Int
  ticksInCurrentEpoch      Int
  emptyTicksInCurrentEpoch Int
  epochTickQuality         Float
  burnedQus                String

  @@unique([date])
}
